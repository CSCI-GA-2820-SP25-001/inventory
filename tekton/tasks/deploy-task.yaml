apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-to-kubernetes
spec:
  description: |
    This task deploys the application to Kubernetes
  params:
    - name: image-name
      description: The name of the image to deploy
      type: string
      default: "petshop"
    - name: image-tag
      description: The tag of the image to deploy
      type: string
      default: "1.0"
    - name: registry
      description: The registry where the image is stored
      type: string
      default: "cluster-registry:5000"
    - name: namespace
      description: The namespace to deploy to
      type: string
      default: "default"
  workspaces:
    - name: source
      description: The workspace containing the source code and k8s manifests
  steps:
    - name: update-image
      image: bitnami/kubectl:latest
      workingDir: $(workspaces.source.path)
      script: |
        # Update the image in the deployment manifest
        cd $(workspaces.source.path)
        if [ -d "k8s" ]; then
          for file in k8s/*.yaml; do
            if grep -q "image:" $file; then
              sed -i "s|image:.*|image: $(params.registry)/$(params.image-name):$(params.image-tag)|g" $file
            fi
          done
        else
          echo "k8s directory not found. Creating basic deployment and service."
          mkdir -p k8s
          cat > k8s/deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: $(params.image-name)
          labels:
            app: $(params.image-name)
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: $(params.image-name)
          template:
            metadata:
              labels:
                app: $(params.image-name)
            spec:
              containers:
              - name: $(params.image-name)
                image: $(params.registry)/$(params.image-name):$(params.image-tag)
                ports:
                - containerPort: 8080
        EOF
          
          cat > k8s/service.yaml << EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: $(params.image-name)
        spec:
          selector:
            app: $(params.image-name)
          ports:
          - port: 80
            targetPort: 8080
          type: ClusterIP
        EOF
        fi
    
    - name: deploy
      image: bitnami/kubectl:latest
      workingDir: $(workspaces.source.path)
      script: |
        # Apply the manifests
        kubectl create namespace $(params.namespace) --dry-run=client -o yaml | kubectl apply -f -
        kubectl apply -f k8s/ -n $(params.namespace)
